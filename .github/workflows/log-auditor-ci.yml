name: Log Auditor CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  comprehensive-test:
    name: Run Comprehensive Log Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # GitHub Actions runners already have Docker installed
        # Just make sure it's running
        sudo systemctl start docker || true
        sudo systemctl enable docker || true
        
        # Install/Update AWS CLI v2 (handle existing installation)
        if aws --version 2>/dev/null; then
          echo "AWS CLI already installed: $(aws --version)"
        else
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update || sudo ./aws/install
          rm -f awscliv2.zip
        fi
        
        # Install jq
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Configure AWS credentials for LocalStack
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
      run: |
        # Set AWS credentials as environment variables for LocalStack
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
        echo "AWS_DEFAULT_OUTPUT=json" >> $GITHUB_ENV
        
        # Verify configuration using environment variables
        echo "AWS configuration via environment variables:"
        echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
        echo "AWS_SECRET_ACCESS_KEY: [HIDDEN]"
        echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"
        echo "AWS_DEFAULT_OUTPUT: ${AWS_DEFAULT_OUTPUT}"
        
    - name: Make test script executable
      run: chmod +x test-comprehensive.sh
      
    - name: Cleanup existing LocalStack containers
      run: |
        echo "Cleaning up any existing LocalStack containers..."
        # Stop docker-compose services if running
        docker compose down || true
        
        # Kill any processes using port 4566
        lsof -ti:4566 | xargs -r kill -9 || true
        
        echo "Cleanup completed"
        
    - name: Start LocalStack
      run: |
        echo "Starting LocalStack with docker-compose..."
        docker compose up -d localstack
        
        echo "Waiting for LocalStack to be ready..."
        # Give LocalStack more time to start all services
        sleep 15
        
        # Wait for LocalStack to be ready with better debugging
        timeout 300 bash -c '
          while true; do
            echo "Checking LocalStack health..."
            
            # Check if LocalStack container is running
            if ! docker ps | grep -q localstack-main; then
              echo "LocalStack container is not running"
              docker logs localstack-main --tail 20
              exit 1
            fi
            
            # Check health endpoint
            health_response=$(curl -s http://localhost:4566/_localstack/health 2>/dev/null || echo "")
            if [ -n "$health_response" ]; then
              echo "Health response: $health_response"
              
              # Check if all required services are running (including IAM for CloudFormation roles)
              if echo "$health_response" | jq -e "(.services.lambda == \"available\" or .services.lambda == \"running\") and (.services.s3 == \"available\" or .services.s3 == \"running\") and (.services.cloudformation == \"available\" or .services.cloudformation == \"running\") and (.services.logs == \"available\" or .services.logs == \"running\") and (.services.iam == \"available\" or .services.iam == \"running\") and (.services.sts == \"available\" or .services.sts == \"running\")" >/dev/null 2>&1; then
                echo "All required services are available!"
                break
              else
                echo "Some services not ready yet, checking individual status:"
                echo "$health_response" | jq -r ".services | to_entries | .[] | \"\(.key): \(.value)\""
              fi
            else
              echo "No health response yet..."
            fi
            
            sleep 5
          done
        ' || {
          echo "LocalStack failed to start within timeout. Checking logs..."
          docker logs localstack-main --tail 50
          echo "Container status:"
          docker ps -a | grep localstack-main
          exit 1
        }
        
        echo "LocalStack is ready!"
        curl -s http://localhost:4566/_localstack/health | jq .
        
    - name: Run comprehensive test
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
        AWS_ENDPOINT_URL: http://localhost:4566
        ENVIRONMENT: localstack
        LOCALSTACK_HOSTNAME: localhost
      run: |
        echo "Starting comprehensive log analysis test..."
        ./test-comprehensive.sh
        echo "Test completed!"
        
    - name: Find test results directory
      id: find-results
      run: |
        RESULTS_DIR=$(find . -name "test-results-*" -type d | head -1)
        if [ -z "$RESULTS_DIR" ]; then
          echo "No test results directory found!"
          exit 1
        fi
        echo "results_dir=$RESULTS_DIR" >> $GITHUB_OUTPUT
        echo "Found results directory: $RESULTS_DIR"
        
    - name: Parse and display results
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "# Log Auditor Comprehensive Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Results Directory:** \`$RESULTS_DIR\`" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create summary table
        echo "## Summary Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Logs | Findings | Critical | Users | Errors |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|----------|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        total_logs=0
        total_findings=0
        total_critical=0
        total_users=0
        total_errors=0
        
        # Process each service result
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            
            case $service in
              payment) display="Payment" ;;
              auth) display="Auth" ;;
              database) display="Database" ;;
              api-gateway) display="API Gateway" ;;
              *) display="$service" ;;
            esac
            
            logs=$(jq -r '.processed_logs // 0' "$result_file")
            findings=$(jq -r '.summary.total_findings // 0' "$result_file")
            critical=$(jq -r '.critical_findings_count // 0' "$result_file")
            users=$(jq -r '.summary.unique_users // 0' "$result_file")
            errors=$(jq -r '.summary.error_count // 0' "$result_file")
            
            echo "| $display | $logs | $findings | $critical | $users | $errors |" >> $GITHUB_STEP_SUMMARY
            
            total_logs=$((total_logs + logs))
            total_findings=$((total_findings + findings))
            total_critical=$((total_critical + critical))
            total_users=$((total_users + users))
            total_errors=$((total_errors + errors))
          fi
        done
        
        echo "| **TOTAL** | **$total_logs** | **$total_findings** | **$total_critical** | **$total_users** | **$total_errors** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: Display detailed results for each service
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "## Detailed Service Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Process each service result in detail
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            
            case $service in
              payment) display="Payment" ;;
              auth) display="Auth" ;;
              database) display="Database" ;;
              api-gateway) display="API Gateway" ;;
              *) display="$service" ;;
            esac
            
            echo "### $display" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract metrics
            logs=$(jq -r '.processed_logs // 0' "$result_file")
            findings=$(jq -r '.summary.total_findings // 0' "$result_file")
            critical=$(jq -r '.critical_findings_count // 0' "$result_file")
            users=$(jq -r '.summary.unique_users // 0' "$result_file")
            errors=$(jq -r '.summary.error_count // 0' "$result_file")
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Logs Processed | $logs |" >> $GITHUB_STEP_SUMMARY
            echo "| Total Findings | $findings |" >> $GITHUB_STEP_SUMMARY
            echo "| Critical Findings | $critical |" >> $GITHUB_STEP_SUMMARY
            echo "| Unique Users | $users |" >> $GITHUB_STEP_SUMMARY
            echo "| Error Count | $errors |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show findings by type
            echo "#### Findings by Type" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.summary.findings_by_type // {} | to_entries | sort_by(.value) | reverse | .[] | "| \(.key) | \(.value) |"' "$result_file" >> $GITHUB_STEP_SUMMARY || echo "| No findings | 0 |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show sample critical findings
            critical_count=$(jq -r '.findings | map(select(.severity == "critical")) | length' "$result_file")
            if [ "$critical_count" -gt 0 ]; then
              echo "#### Sample Critical Findings" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              jq -r '.findings | map(select(.severity == "critical")) | limit(3; .[])' "$result_file" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Show sample user activities  
            user_activity_count=$(jq -r '.findings | map(select(.type == "UserActivity")) | length' "$result_file")
            if [ "$user_activity_count" -gt 0 ]; then
              echo "#### Sample User Activities" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              jq -r '.findings | map(select(.type == "UserActivity")) | limit(3; .[])' "$result_file" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-results
        path: |
          ${{ steps.find-results.outputs.results_dir }}/**/*
        retention-days: 30
        
    - name: Display raw JSON results  
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "## Raw JSON Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand raw analysis results</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            echo "### $service Service Raw Results" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat "$result_file" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Comprehensive analysis completed successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "Download the test results artifact for complete output including Lambda responses and metadata." >> $GITHUB_STEP_SUMMARY
  matrix-analysis:
    name: Individual Analysis - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: comprehensive-test
    strategy:
      matrix:
        service: [payment, auth, database, api-gateway]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-test-results
        
    - name: Display ${{ matrix.service }} results
      run: |
        # Find the results directory
        RESULTS_DIR=$(find . -name "test-results-*" -type d | head -1)
        ANALYSIS_FILE="$RESULTS_DIR/analysis-results/${{ matrix.service }}-analysis.json"
        
        if [ ! -f "$ANALYSIS_FILE" ]; then
          echo "❌ Analysis file not found for ${{ matrix.service }}: $ANALYSIS_FILE"
          exit 1
        fi
        
        case ${{ matrix.service }} in
          payment) display="Payment" ;;
          auth) display="Auth" ;;
          database) display="Database" ;;
          api-gateway) display="API Gateway" ;;
        esac
        
        echo "# $display Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract and display metrics
        logs=$(jq -r '.processed_logs // 0' "$ANALYSIS_FILE")
        findings=$(jq -r '.summary.total_findings // 0' "$ANALYSIS_FILE")
        critical=$(jq -r '.critical_findings_count // 0' "$ANALYSIS_FILE")
        users=$(jq -r '.summary.unique_users // 0' "$ANALYSIS_FILE")
        errors=$(jq -r '.summary.error_count // 0' "$ANALYSIS_FILE")
        
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Total Logs Processed | $logs |" >> $GITHUB_STEP_SUMMARY
        echo "| Total Findings | $findings |" >> $GITHUB_STEP_SUMMARY
        echo "| Critical Findings | $critical |" >> $GITHUB_STEP_SUMMARY
        echo "| Unique Users | $users |" >> $GITHUB_STEP_SUMMARY
        echo "| Error Count | $errors |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Complete JSON output
        echo "## Complete Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat "$ANALYSIS_FILE" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 
