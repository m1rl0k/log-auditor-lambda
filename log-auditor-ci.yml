name: Log Auditor CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  comprehensive-test:
    name: Run Comprehensive Log Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # Install Docker
        sudo apt-get update
        sudo apt-get install -y docker.io
        
        # Install AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        
        # Install jq
        sudo apt-get install -y jq
        
    - name: Make test script executable
      run: chmod +x test-comprehensive.sh
      
    - name: Run comprehensive test
      run: |
        echo "🚀 Starting comprehensive log analysis test..."
        ./test-comprehensive.sh
        echo "✅ Test completed!"
        
    - name: Find test results directory
      id: find-results
      run: |
        RESULTS_DIR=$(find . -name "test-results-*" -type d | head -1)
        if [ -z "$RESULTS_DIR" ]; then
          echo "❌ No test results directory found!"
          exit 1
        fi
        echo "results_dir=$RESULTS_DIR" >> $GITHUB_OUTPUT
        echo "📁 Found results directory: $RESULTS_DIR"
        
    - name: Parse and display results
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "# 🔍 Log Auditor Comprehensive Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Results Directory:** \`$RESULTS_DIR\`" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create summary table
        echo "## 📊 Summary Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Logs | Findings | Critical | Users | Errors |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|----------|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        
        total_logs=0
        total_findings=0
        total_critical=0
        total_users=0
        total_errors=0
        
        # Process each service result
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            
            case $service in
              payment) display="💳 Payment" ;;
              auth) display="🔐 Auth" ;;
              database) display="🗄️ Database" ;;
              api-gateway) display="🌐 API Gateway" ;;
              *) display="📋 $service" ;;
            esac
            
            logs=$(jq -r '.processed_logs // 0' "$result_file")
            findings=$(jq -r '.summary.total_findings // 0' "$result_file")
            critical=$(jq -r '.critical_findings_count // 0' "$result_file")
            users=$(jq -r '.summary.unique_users // 0' "$result_file")
            errors=$(jq -r '.summary.error_count // 0' "$result_file")
            
            echo "| $display | $logs | $findings | $critical | $users | $errors |" >> $GITHUB_STEP_SUMMARY
            
            total_logs=$((total_logs + logs))
            total_findings=$((total_findings + findings))
            total_critical=$((total_critical + critical))
            total_users=$((total_users + users))
            total_errors=$((total_errors + errors))
          fi
        done
        
        echo "| **TOTAL** | **$total_logs** | **$total_findings** | **$total_critical** | **$total_users** | **$total_errors** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
    - name: Display detailed results for each service
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "## 📋 Detailed Service Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Process each service result in detail
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            
            case $service in
              payment) display="💳 Payment Service" ;;
              auth) display="🔐 Authentication Service" ;;
              database) display="🗄️ Database Service" ;;
              api-gateway) display="🌐 API Gateway Service" ;;
              *) display="📋 $service Service" ;;
            esac
            
            echo "### $display" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract metrics
            logs=$(jq -r '.processed_logs // 0' "$result_file")
            findings=$(jq -r '.summary.total_findings // 0' "$result_file")
            critical=$(jq -r '.critical_findings_count // 0' "$result_file")
            users=$(jq -r '.summary.unique_users // 0' "$result_file")
            errors=$(jq -r '.summary.error_count // 0' "$result_file")
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Total Logs Processed | $logs |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔍 Total Findings | $findings |" >> $GITHUB_STEP_SUMMARY
            echo "| ⚠️ Critical Findings | $critical |" >> $GITHUB_STEP_SUMMARY
            echo "| 👥 Unique Users | $users |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Error Count | $errors |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show findings by type
            echo "#### 📊 Findings by Type" >> $GITHUB_STEP_SUMMARY
            echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.summary.findings_by_type // {} | to_entries | sort_by(.value) | reverse | .[] | "| \(.key) | \(.value) |"' "$result_file" >> $GITHUB_STEP_SUMMARY || echo "| No findings | 0 |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show sample critical findings
            critical_count=$(jq -r '.findings | map(select(.severity == "critical")) | length' "$result_file")
            if [ "$critical_count" -gt 0 ]; then
              echo "#### 🚨 Sample Critical Findings" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              jq -r '.findings | map(select(.severity == "critical")) | limit(3; .[])' "$result_file" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Show sample user activities  
            user_activity_count=$(jq -r '.findings | map(select(.type == "UserActivity")) | length' "$result_file")
            if [ "$user_activity_count" -gt 0 ]; then
              echo "#### 👤 Sample User Activities" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              jq -r '.findings | map(select(.type == "UserActivity")) | limit(3; .[])' "$result_file" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-results
        path: |
          ${{ steps.find-results.outputs.results_dir }}/**/*
        retention-days: 30
        
    - name: Display raw JSON results  
      run: |
        RESULTS_DIR="${{ steps.find-results.outputs.results_dir }}"
        ANALYSIS_DIR="$RESULTS_DIR/analysis-results"
        
        echo "## 📄 Raw JSON Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand raw analysis results</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in "$ANALYSIS_DIR"/*-analysis.json; do
          if [ -f "$result_file" ]; then
            service=$(basename "$result_file" | sed 's/-analysis.json//')
            echo "### $service Service Raw Results" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat "$result_file" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**✅ Comprehensive analysis completed successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "Download the test results artifact for complete output including Lambda responses and metadata." >> $GITHUB_STEP_SUMMARY

  matrix-analysis:
    name: Individual Analysis - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: comprehensive-test
    strategy:
      matrix:
        service: [payment, auth, database, api-gateway]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-test-results
        
    - name: Display ${{ matrix.service }} results
      run: |
        # Find the results directory
        RESULTS_DIR=$(find . -name "test-results-*" -type d | head -1)
        ANALYSIS_FILE="$RESULTS_DIR/analysis-results/${{ matrix.service }}-analysis.json"
        
        if [ ! -f "$ANALYSIS_FILE" ]; then
          echo "❌ Analysis file not found for ${{ matrix.service }}: $ANALYSIS_FILE"
          exit 1
        fi
        
        case ${{ matrix.service }} in
          payment) display="💳 Payment Service" ;;
          auth) display="🔐 Authentication Service" ;;
          database) display="🗄️ Database Service" ;;
          api-gateway) display="🌐 API Gateway Service" ;;
        esac
        
        echo "# $display Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract and display metrics
        logs=$(jq -r '.processed_logs // 0' "$ANALYSIS_FILE")
        findings=$(jq -r '.summary.total_findings // 0' "$ANALYSIS_FILE")
        critical=$(jq -r '.critical_findings_count // 0' "$ANALYSIS_FILE")
        users=$(jq -r '.summary.unique_users // 0' "$ANALYSIS_FILE")
        errors=$(jq -r '.summary.error_count // 0' "$ANALYSIS_FILE")
        
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Total Logs Processed | $logs |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Total Findings | $findings |" >> $GITHUB_STEP_SUMMARY
        echo "| ⚠️ Critical Findings | $critical |" >> $GITHUB_STEP_SUMMARY
        echo "| 👥 Unique Users | $users |" >> $GITHUB_STEP_SUMMARY
        echo "| ❌ Error Count | $errors |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Complete JSON output
        echo "## 📄 Complete Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat "$ANALYSIS_FILE" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 
